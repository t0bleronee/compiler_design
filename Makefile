# Compiler settings
CXX = g++
CXXFLAGS = -Wall -Wextra -std=c++11 -g -Isrc

YACC = bison
YACCFLAGS = -d -v

LEX = flex
LEXFLAGS =

# Directories
SRC_DIR = src
BUILD_DIR = build
OUTPUT_DIR = outputs

# Target executable
TARGET = compiler

# Source files
YACC_SRC = $(SRC_DIR)/parser.y
LEX_SRC  = $(SRC_DIR)/lexer.l
CPP_SRC  = $(SRC_DIR)/errors.cpp $(SRC_DIR)/symbol_table.cpp $(SRC_DIR)/ast.cpp $(SRC_DIR)/semantic_analyzer.cpp

# Generated files
YACC_C = $(BUILD_DIR)/parser.tab.c
YACC_H = $(BUILD_DIR)/parser.tab.h
LEX_C  = $(BUILD_DIR)/lex.yy.c

# Object files
OBJS = $(YACC_C:.c=.o) $(LEX_C:.c=.o) $(CPP_SRC:$(SRC_DIR)/%.cpp=$(BUILD_DIR)/%.o)

# Default target
all: $(TARGET)

# Build the compiler
$(TARGET): $(OBJS)
	$(CXX) $(CXXFLAGS) -o $@ $^ -lfl


# Generate parser from yacc file
$(YACC_C) $(YACC_H): $(YACC_SRC)
	mkdir -p $(BUILD_DIR)
	$(YACC) $(YACCFLAGS) --defines=$(YACC_H) -o $(YACC_C) $<
	

# Generate lexer from lex file
$(LEX_C): $(LEX_SRC) $(YACC_H)
	$(LEX) $(LEXFLAGS) -o $(LEX_C) $<

# Compile C files generated by yacc/lex
$(BUILD_DIR)/%.o: $(BUILD_DIR)/%.c
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Compile C++ files
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.cpp
	mkdir -p $(BUILD_DIR)
	$(CXX) $(CXXFLAGS) -c $< -o $@
	
# Run compiler on all testcases and save outputs
testcases: $(TARGET)
	mkdir -p $(OUTPUT_DIR)
	for file in testcases/*; do \
	    base=$$(basename $$file); \
	    echo "Running test: $$file"; \
	    ./$(TARGET) < $$file > $(OUTPUT_DIR)/$$base.txt; \
	done
	
# Test with sample programs
test: $(TARGET)
	@echo "Testing simple program..."
	@echo 'int main() { return 0; }' | ./$(TARGET)
	@echo ""
	@echo "Testing with sample.cpp if it exists..."
	@if [ -f sample.cpp ]; then ./$(TARGET) sample.cpp; fi

# Clean generated files
clean:
	rm -rf $(BUILD_DIR) $(TARGET) parser.output

distclean: clean
	rm -f ~ .bak core

.PHONY: all test clean distclean
